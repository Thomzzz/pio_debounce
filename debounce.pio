; This program is intended for use with a button connected to ground. The pull-up resistor
; is already initialized.
; This program is written to prioritize reaction time on pressing down the button and this 
; takes 2 clock cycles.
; Button release is registered after approximately (2 * numberOfCounterLoops) clock cycles.

; Since this program is not really time sensitive I decided to update the debounce time 
; within the press release loop. This gives the user more flexibility in changing the 
; debounce time on the fly. It is updated after each button release. The debounce time must
; be set before use.

; Todo:
; - Figure out which way to notify the user of button press/release (RX fifo and/or IRQ).

; y is the counter (counts down)
; x is the debounce duration

.program debounce

    pull block                      ; Force the user to set the debounce time
    mov x osr

.wrap_target ;released
                                    ; Get debounce time from user
    pull noblock                    ; If available put TX fifo data in OSR. Else put X in OSR
    mov x osr                       ; Put the value of OSR in X

    wait 0 pin 0                    ; Wait until pressed
    set y 1
    mov isr y                       ; Set ISR to 1
    push noblock                    ; Send state to user
pressed_loop:
    jmp pin signal_high
    mov y x                         ; Reset counter to debounce time 
    jmp pressed_loop
    
signal_high:
    jmp y-- pressed_loop            ; If the counter has not reached 0 then decrement it and restart the loop
    set y 0
    mov isr y                       ; Set ISR to 0
    push noblock                    ; Send state to user
.wrap

% c-sdk {
static inline void debounce_program_init(PIO pio, uint sm, uint offset, uint debouncePin) 
{
    pio_sm_config c = debounce_program_get_default_config(offset);

    pio_gpio_init(pio, debouncePin);
    gpio_pull_up(debouncePin);

    sm_config_set_in_pins(&c, debouncePin);
    sm_config_set_jmp_pin (&c, debouncePin);

    pio_sm_set_consecutive_pindirs(pio, sm, debouncePin, 1, false);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void debounce_program_set_debounce(PIO pio, uint sm, float debounceDurationMs)
{
    float tickDurationMs = 1000.0f / clock_get_hz(clk_sys);                 // The duration of 1 clock tick expressed in milliseconds
    uint numberOfCounterLoops = debounceDurationMs / (2 * tickDurationMs);  // 1 count loop takes 2 clock ticks
    pio_sm_put(pio, sm, numberOfCounterLoops);
}

static inline bool debounce_program_get_button_pressed(PIO pio, uint sm)
{
    // The static variable keeps its value across multiple function calls
    // This variable keeps track of the button state for all 8 possible state machines
    static uint buttonStates = 0;

    // Get the index of the button state
    uint index = (pio == pio0) ? sm : 4 + sm;

    // Drain the buffer and only keep the last state as this is the most recent one
    while(!pio_sm_is_rx_fifo_empty(pio, sm))
    {
        if(pio_sm_get(pio, sm) != 0)
            buttonStates |= (1 << index);
        else
            buttonStates &= ~(1 << index);
    }

    return ((buttonStates >> index) & 1);
}
%}
